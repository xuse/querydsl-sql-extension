<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<properties>
		<jmh.version>1.35</jmh.version>
	</properties>
	<groupId>io.github.xuse</groupId>
	<artifactId>benchmarks</artifactId>
	<name>benchmarks</name>
	<version>5.0.0-r130</version>
	<url>http://maven.apache.org</url>
	<dependencies>
		<dependency>
			<groupId>io.github.xuse</groupId>
			<artifactId>querydsl-sql-extension</artifactId>
			<version>${project.version}</version>
		</dependency>
		<!--
		关于JMH的测试代码生成，有以下注意事项：
		1. jmh-core 和 jmh-generator-annprocess 都不能是scope=test，至少必须是provided.
		很多人在IJ下碰到BenchmarkList资源找不到，都是这个问题。
		2.
		在Eclipse下，会碰到更多问题。需要手工配置注解处理器，如果benchmark类是test类，在Eclipse下不生成META-INF/BenchmarkList资源，需要手工调用一次
		compiler:testCompile 才会生成。在IJ下没有这个问题。
		3. 必须在生成上述资源文件后。使用main方法或maven插件、或junit runner才能正常调用jmh测试。否则都是报找不到资源文件错误。
	-->
		<dependency>
			<groupId>org.openjdk.jmh</groupId>
			<artifactId>jmh-core</artifactId>
			<version>${jmh.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openjdk.jmh</groupId>
			<artifactId>jmh-generator-annprocess</artifactId>
			<version>${jmh.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>1.18.32</version>
						</path>
						<path>
							<groupId>org.openjdk.jmh</groupId>
							<artifactId>jmh-generator-annprocess</artifactId>
							<version>${jmh.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>pw.krejci</groupId>
				<artifactId>jmh-maven-plugin</artifactId>
				<version>0.2.2</version>
			</plugin>
		</plugins>
	</build>
</project>

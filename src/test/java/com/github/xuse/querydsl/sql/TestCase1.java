package com.github.xuse.querydsl.sql;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.List;

import org.junit.Test;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import com.github.xuse.querydsl.entity.Aaa;
import com.github.xuse.querydsl.entity.AvsUserAuthority;
import com.github.xuse.querydsl.entity.QAaa;
import com.github.xuse.querydsl.entity.QAvsUserAuthority;
import com.querydsl.core.types.dsl.DateTimeExpression;
import com.querydsl.sql.DerbyTemplates;
import com.querydsl.sql.SQLTemplates;

public class TestCase1 {
	
	private DriverManagerDataSource ds=new DriverManagerDataSource();
	
	private SQLQueryFactory factory;
	{
		ds.setDriverClassName("org.apache.derby.jdbc.EmbeddedDriver");
		ds.setUrl("jdbc:derby:db;create=true");
//		factory=new com.querydsl.sql.SQLQueryFactory(querydslConfiguration(), ds);
		factory= new SQLQueryFactory(querydslConfiguration(),ds,false);	
	}

	public com.querydsl.sql.Configuration querydslConfiguration() {
		SQLTemplates templates = DerbyTemplates.builder().newLineToSingleSpace().build();
		com.querydsl.sql.Configuration configuration = new com.querydsl.sql.Configuration(templates);
		configuration.addListener(new QueryDSLDebugListener());
		return configuration;
	}
	
	@Test
	public void test2() throws SQLException {
		Connection conn=ds.getConnection();
		try (Statement st=conn.createStatement()){
			st.executeUpdate("create table aaa(id int, name varchar(64), created timestamp)");
			st.executeUpdate("CREATE TABLE avs_user_authority (\r\n" + 
					" id int not null generated by default as identity,\r\n" + 
					" user_id varchar(64) NOT NULL DEFAULT '',\r\n" + 
					" dev_id varchar(64) DEFAULT NULL,\r\n" + 
					" channel_no int DEFAULT 0,\r\n" + 
					"  auth_type int,\r\n" + 
					"  auth_content varchar(256),\r\n" + 
					"  create_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n" + 
					"  update_time timestamp NOT NULL,\r\n" + 
					"  PRIMARY KEY (id)\r\n" + 
					")");
		}
		conn.close();
	}
	
	
	
	@Test
	public void test1() {
		QAaa t1=QAaa.aaa;
		Aaa a=new Aaa();
		a.setId(1);
		a.setName("张三");
		a.setCreated(new Timestamp(System.currentTimeMillis()));
		factory.insert(t1).populate(a).execute();
		
		QAvsUserAuthority t2=QAvsUserAuthority.avsUserAuthority;
		int id=factory.insert(t2).set(t2.authContent, "abcdefg")
		.set(t2.devId, "123")
		.set(t2.updateTime,new Timestamp(System.currentTimeMillis()))
		.executeWithKey(t2.id);
		System.out.println(id);
		
		
		long count=factory.selectFrom(t2).where(t2.id.eq(id)).fetchCount();
		System.out.println("Count:"+count);
		
		
		List<AvsUserAuthority> entity=factory.selectFrom(t2).where(t2.id.eq(id)).fetch();
		
		factory.selectFrom(t2).where(t2.id.eq(id)).fetchOne();
		factory.selectFrom(t2).where(t2.id.eq(id)).fetchFirst();
		System.out.println(entity);
		
		factory.update(t1).set(t1.name, t1.name.concat("Abc123")).where(t1.id.eq(id))
		.execute();
		
		factory.update(t2)
		.set(t2.createTime,DateTimeExpression.currentTimestamp(Timestamp.class))
		.where(t2.userId.eq("1")).execute();
		
	}
	
	@Test
	public void testBatchSQL() {
		
	}


}

package com.github.xuse.querydsl.sql.column;

import java.util.Collections;
import java.util.function.Predicate;

import com.github.xuse.querydsl.annotation.GeneratedType;
import com.github.xuse.querydsl.annotation.UnsavedValue;
import com.querydsl.core.types.ConstantImpl;
import com.querydsl.core.types.Expression;
import com.querydsl.core.types.Template;
import com.querydsl.core.types.TemplateFactory;
import com.querydsl.core.types.dsl.Expressions;
import com.querydsl.sql.types.Type;

/**
 * A ‘UI’ class provide to Qxxx classes.
 * @author jiyi
 * 
 * 
 * <h3>四个default value相关方法的比较</h3>
 * <ol>
 * <li>{@link #defaultValue(Object)} 当java的数据表达可以直接用于SQL表达式时，如String和Number，且在数据库中也是字符和数值时</li>
 * <li>{@link #defaultValueInString(String)} 当数据库中的缺省值可以用字符串表达时，比如date、timestamp等，虽然数据类型不是字符串，但数据库认可以字符串形式设置的常量。</li>
 * <li>{@link #defaultExpression(String)} 传入一个表达式用的字符串，比如传入'1'表示字符串的1，传入1表示数字的1.</li>
 * <li>{@link #defaultExpression(Expression)} 直接传入一个系统的表达式对象。 </li>
 * </ol>
 * @param <T> 
 *
 */

public class ColumnBuilder<T> {
	private final PathMapping path;

	public ColumnBuilder(PathMapping p) {
		this.path = p;
	}

	/**
	 * 如果是数值类型，支持无符号，如果不是会抛出异常
	 * @return this
	 */
	public ColumnBuilder<T> unsigned() {
		path.setUnsigned(true);
		return this;
	}

	/**
	 * 设置默认值。仅限Java数值和SQL的数值表达方式一致的场合。、
	 * 如果Java中是枚举，数据库中是INT的映射，这个方法是无法使用的。请使用{@link #defaultExpression(String)}
	 * @param value
	 * @return this
	 */
	public ColumnBuilder<T> defaultValue(T value) {
		if(value instanceof String || value instanceof Number || value instanceof Boolean) {
			path.setDefaultExpression(ConstantImpl.create(value));	
		}else {
			//if user has set CustomType for this java type, do not supported for now.
			throw new UnsupportedOperationException("");
		}
		return this;
	}
	
	/**
	 * 以String的方式设置列默认值。例如字段类型为Timestamp等时间时，可以用字符串描述时间。
	 * 注意这个方法不宜用于设置INT, FLOAT等类型的缺省值
	 * @param value
	 * @return this
	 */
	public ColumnBuilder<T> defaultValueInString(String value) {
		path.setDefaultExpression(ConstantImpl.create(value));
		return this;
	}

	/**
	 * 设置缺省值表达式。注意表达式要完整
	 * @param template
	 * @return this
	 */
	public ColumnBuilder<T> defaultExpression(String template) {
		Template tt=TemplateFactory.DEFAULT.create(template);
		path.setDefaultExpression(Expressions.simpleTemplate(path.getType(), tt, Collections.emptyList()));
		return this;
	}
	
	/**
	 * 设置缺省值
	 * @param expression
	 * @return this
	 */
	public ColumnBuilder<T> defaultExpression(Expression<T> expression) {
		path.setDefaultExpression(expression);
		return this;
	}
	
	/**
	 * 定义其他字段修饰
	 * @param features
	 * @return this
	 */
	public ColumnBuilder<T> with(ColumnFeature... features) {
		path.setFeatures(features);
		return this;
	}

	/**
	 * 配置字段注释
	 * @param comment
	 * @return this
	 */
	public ColumnBuilder<T> comment(String comment) {
		path.setComment(comment);
		return this;
	}

	/**
	 * 设置自定义的UnsavedValue判断器
	 * @param unsavedValue
	 * @return this
	 */
	public ColumnBuilder<T> withUnsavePredicate(Predicate<Object> unsavedValue) {
		path.setUnsavedValue(unsavedValue);
		return this;
	};
	
	/**
	 * 插入时默认的populate方法对该字段无效
	 * @return this
	 */
	public ColumnBuilder<T> withoutInsertPopulate() {
		path.setNotInsert(true);
		return this;
	}
	
	/**
	 * 更新时默认的populate方法对该字段无效
	 * @return this
	 */
	public ColumnBuilder<T> withoutUpdatePopulate() {
		path.setNotUpdate(true);
		return this;
	}
	
	/**
	 * 设置自定义的UnsavedValue判断器
	 * @param expression 和 {@link UnsavedValue} 中 value的用法一样
	 * @return this
	 */
	public ColumnBuilder<T> withUnsavePredicate(String expression) {
		path.setUnsavedValue(UnsavedValuePredicateFactory.create(path.getType(), expression));
		return this;
	}
	
	/**
	 * 自定义映射类型
	 * @param type
	 * @return this
	 */
	public ColumnBuilder<T> withCustomType(Type<?> type) {
		path.setCustomType(type);
		return this;
	}
	
	/**
	 * 为当前列制定一个自动生成策略
	 * 
	 * @param type
	 * @param overwite
	 * @param writeback
	 * @param params
	 * @return this
	 */
	public ColumnBuilder<T> withAutoGenerate(GeneratedType type, boolean overwite, boolean writeback, String... params) {
		path.setGenerated(new AutoGeneratedImpl(type, overwite, writeback, params));
		return this;
	}
	
	/**
	 * 为当前列制定一个自动生成策略
	 * 
	 * @param type
	 * @param params
	 * @return this
	 */
	public ColumnBuilder<T> withAutoGenerate(GeneratedType type,String... params) {
		path.setGenerated(new AutoGeneratedImpl(type, false, false, params));
		return this;
	}
	
}

package com.github.xuse.querydsl.sql.expression;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import com.github.xuse.querydsl.annotation.AutoGenerated;
import com.github.xuse.querydsl.annotation.UnsavedValue;
import com.github.xuse.querydsl.sql.RelationalPathEx;
import com.github.xuse.querydsl.sql.column.ColumnMapping;
import com.github.xuse.querydsl.sql.column.UnsavedValuePredicateFactory;
import com.github.xuse.querydsl.util.Entry;
import com.github.xuse.querydsl.util.collection.ArrayListMap;
import com.querydsl.core.QueryException;
import com.querydsl.core.Tuple;
import com.querydsl.core.types.Path;
import com.querydsl.core.types.dsl.Expressions;
import com.querydsl.core.util.ReflectionUtils;
import com.querydsl.sql.RelationalPath;
import com.querydsl.sql.dml.Mapper;

/**
 * A Mapper that using dynamic codec class to extract values from the
 * entity-bean.
 * 
 * @see Mapper
 * 
 * @author Joey
 */
public class AdvancedMapper extends AbstractMapperSupport implements Mapper<Object>{
	/**
	 * Singleton instance
	 * 空值绑定会被跳过，因此在Batch模式下根据参数中的空值不同，很容易生成多组SQL语句。
	 * 当多组SQL执行executeWithKey时，会抛出异常，因此执行批量插入并且获取Key时，不能使用这种Mapper。
	 */
	public static final AdvancedMapper DEFAULT = new AdvancedMapper(0);
	
	private int scenario;
	
	public static final Mapper<?> getDefaultMapper(RelationalPath<?> table) {
		if(table.getType()!=Tuple.class) {
			return DEFAULT;
		}
		return TupleMapper.DEFAULT;
	}

	/**
	 * 非主键字段，将会在值的Map中写入Null值。 简单来说，即是Null is null. 默认情况下，Null is "using default"
	 * 
	 * @param scenario
	 * @return AdvancedMapper
	 */
	public static final AdvancedMapper ofNullsBinding(int scenario) {
		return new AdvancedMapper(scenario) {
			protected void processNullBindings(Path<?> path, List<Entry<Path<?>, Object>> data,
					ColumnMapping metadata) {
				if (!isKeyColumn(path)) {
					data.add(new Entry<>(path, com.querydsl.sql.types.Null.DEFAULT));
				}
			}
		};
	}

	/**
	 * 直接在SQL语句的Value区域写入DEFAULT关键字。在某些数据库上有用。 简单来说，即是Null is DEFAULT.
	 * 
	 * @param scenario
	 * @return AdvancedMapper
	 */
	public static final AdvancedMapper ofNullsAsDefaultBinding(int scenario) {
		return new AdvancedMapper(scenario) {
			protected void processNullBindings(Path<?> path, List<Entry<Path<?>, Object>> data,
					ColumnMapping metadata) {
				if (isKeyColumn(path)) {
					return;
				}
				if (metadata != null && metadata.getDefaultExpression() != null) {
					// set use the database default.
					data.add(new Entry<>(path, Expressions.template(path.getType(), "DEFAULT")));
				} else {
					// set as null
					data.add(new Entry<>(path, com.querydsl.sql.types.Null.DEFAULT));
				}
			}
		};
	}

	public AdvancedMapper(int scenario) {
		this.scenario = scenario;
	}

	@SuppressWarnings("rawtypes")
	public Map<Path<?>, Object> createMap(RelationalPath<?> entity, Object bean) {
		if (entity instanceof RelationalPathEx && entity.getType().isAssignableFrom(bean.getClass())) {
			return createMapOptimized((RelationalPathEx) entity, bean);
		} else {
			return createMap0(entity, bean);
		}
	}

	/**
	 * Create the property map using ASM generated class.
	 * 
	 * @param entity
	 * @param bean
	 * @return 映射路径对象
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	private Map<Path<?>, Object> createMapOptimized(RelationalPathEx entity, Object bean) {
		List<Path<?>> path = entity.getColumns();
		BeanCodec bc = entity.getBeanCodec();
		Object[] values = bc.values(bean);
		int len = path.size();
		List<Entry<Path<?>, Object>> data = new ArrayList<>(len);
		for (int i = 0; i < len; i++) {
			Object value = values[i];
			Path<?> p = path.get(i);
			ColumnMapping metadata = entity.getColumnMetadata(p);
			if ((scenario == SCENARIO_UPDATE && metadata.isNotUpdate())
					|| (scenario == SCENARIO_INSERT && metadata.isNotInsert())) {
				continue;
			}
			boolean nullValue = isUnsavedValue(metadata, value);
			// 如果具有自动生成类型
			AutoGenerated generated;
			if ((generated = metadata.getGenerated()) != null && (generated.overwrite() || nullValue)) {
				Object autoValue = asAutoValue(generated, metadata, scenario);
				if (autoValue != null) {
					value = autoValue;
					nullValue = false;
					if (generated.writeback()) {
						metadata.writeback(bean, value);
					}
				}
			}
			if (nullValue) {
				processNullBindings(p, data, metadata);
			} else {
				// 处理空值是否绑定
				data.add(new Entry<>(p, value));
			}
		}
		return ArrayListMap.wrap(data);
	}

	private Map<Path<?>, Object> createMap0(RelationalPath<?> entity, Object bean) {
		try {
			Class<?> beanClass = bean.getClass();
			Map<String, Path<?>> columns = getColumns(entity);
			List<Entry<Path<?>, Object>> data = new ArrayList<>(columns.size());
			for (Map.Entry<String, Path<?>> entry : columns.entrySet()) {
				Path<?> path = entry.getValue();
				// 性能比较差
				Field beanField = ReflectionUtils.getFieldOrNull(beanClass, entry.getKey());
				if (beanField != null && !Modifier.isStatic(beanField.getModifiers())) {
					beanField.setAccessible(true);
					Object value = beanField.get(bean);
					boolean nullValue = isNullValue(beanField, value);
					AutoGenerated anno = beanField.getAnnotation(AutoGenerated.class);
					if (anno != null && (nullValue || anno.overwrite())) {
						Object newValue = asAutoValue(anno, null, scenario);
						if (newValue != null) {
							value = newValue;
							nullValue = false;
						}
					}
					if (!nullValue) {
						data.add(new Entry<>(path, value));
					} else {
						processNullBindings(path, data, null);
					}
				}
			}
			return ArrayListMap.wrap(data);
		} catch (IllegalAccessException e) {
			throw new QueryException(e);
		}
	}

	private final boolean isNullValue(Field field, Object propertyValue) {
		UnsavedValue anno = field.getAnnotation(UnsavedValue.class);
		return UnsavedValuePredicateFactory.create(field.getType(), anno == null ? null : anno.value())
				.test(propertyValue);
	}

	private final Map<String, Path<?>> getColumns(RelationalPath<?> path) {
		Map<String, Path<?>> columns = new LinkedHashMap<>();
		for (Path<?> column : path.getColumns()) {
			columns.put(column.getMetadata().getName(), column);
		}
		return columns;
	}
}
